import React, { useState, useRef, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  Avatar,
  Typography,
  Badge,
  Box,
  Divider,
  CircularProgress,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
} from "@mui/material";
import {
  setActiveChat,
  selectActiveChatId,
  setChatFilter,
  selectChatFilter,
  reorderChats,
} from "../../redux/reducers/chatReducer";
import { useGetChatsQuery } from "../../redux/services/chatAPI";

// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞ —Ä–∞–∑
const CHATS_PER_PAGE = 20;

export default function ChatList() {
  const dispatch = useDispatch();
  const activeChatId = useSelector(selectActiveChatId);
  const chatFilter = useSelector(selectChatFilter);

  // –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –∏–∑ API
  const { data: chatsData, isLoading, error } = useGetChatsQuery();
  const chats = chatsData || [];

  const listRef = useRef(null);
  const [showScrollDown, setShowScrollDown] = useState(false);
  const [displayedChatsCount, setDisplayedChatsCount] =
    useState(CHATS_PER_PAGE);
  const [isLoadingMore, setIsLoadingMore] = useState(false);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç—ã –≤ —Ä–µ–¥—é—Å–µ—Ä –ø—Ä–∏ –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ API
  useEffect(() => {
    if (chatsData) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –≤ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç —Ä–µ–¥—é—Å–µ—Ä
      const formattedChats = chatsData.map((chat) => ({
        id: chat.id,
        name: chat.attributes.contact?.data?.attributes?.name || "–ë–µ–∑ –∏–º–µ–Ω–∏",
        avatar: chat.attributes.contact?.data?.attributes?.avatar || "#f44336",
        lastMessage:
          chat.attributes.messages?.data?.[0]?.attributes?.text || "",
        time:
          chat.attributes.messages?.data?.[0]?.attributes?.timestamp ||
          new Date().toISOString(),
        unread: chat.attributes.unreadCount || 0,
        messages:
          chat.attributes.messages?.data?.map((msg) => ({
            id: msg.id,
            text: msg.attributes.text,
            sender: msg.attributes.sender,
            time: msg.attributes.timestamp,
            status: msg.attributes.status,
          })) || [],
        isClosed: chat.attributes.isClosed || false,
      }));

      dispatch(reorderChats(formattedChats));
    }
  }, [chatsData, dispatch]);

  const handleChatClick = (chatId) => {
    dispatch(setActiveChat(chatId));
  };

  const handleFilterChange = (event) => {
    dispatch(setChatFilter(event.target.value));
  };

  const handleScroll = () => {
    const el = listRef.current;
    if (!el) return;

    const { scrollTop, scrollHeight, clientHeight } = el;
    const isAtBottom = scrollHeight - scrollTop - clientHeight < 100;
    setShowScrollDown(!isAtBottom);

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∫—Ä—É—Ç–∏–ª –¥–æ –∫–æ–Ω—Ü–∞ –∏ –µ—Å—Ç—å –µ—â–µ —á–∞—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    if (isAtBottom && displayedChatsCount < chats.length && !isLoadingMore) {
      setIsLoadingMore(true);

      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
      setTimeout(() => {
        setDisplayedChatsCount((prevCount) =>
          Math.min(prevCount + CHATS_PER_PAGE, chats.length)
        );
        setIsLoadingMore(false);
      }, 300);
    }
  };

  // –°–±—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞
  useEffect(() => {
    setDisplayedChatsCount(CHATS_PER_PAGE);
  }, [chats.length, chatFilter]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
  const filteredChats = chats.filter((chat) => {
    if (chatFilter === "open") return !chat.attributes.isClosed;
    if (chatFilter === "closed") return chat.attributes.isClosed;
    return true;
  });

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ —á–∞—Ç—ã
  const displayedChats = filteredChats.slice(0, displayedChatsCount);

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const formatDate = (dateString) => {
    if (!dateString) return "";
    const date = new Date(dateString);
    return date.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∫–∞–Ω–∞–ª–∞
  const getChannelIcon = (channelType) => {
    switch (channelType) {
      case "whatsapp":
        return "üì±";
      case "telegram":
        return "‚úàÔ∏è";
      case "viber":
        return "üìû";
      default:
        return "üí¨";
    }
  };

  if (isLoading) {
    return (
      <Box
        sx={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          height: "100%",
        }}
      >
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ p: 2, textAlign: "center" }}>
        <Typography color="error">
          –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: {error.message}
        </Typography>
      </Box>
    );
  }

  return (
    <Box
      sx={{ flex: 1, minHeight: 0, display: "flex", flexDirection: "column" }}
    >
      <Box sx={{ p: 2, borderBottom: 1, borderColor: "divider" }}>
        <Typography variant="h6" component="h2" gutterBottom>
          –ß–∞—Ç—ã
        </Typography>
        <FormControl fullWidth size="small">
          <InputLabel id="chat-filter-label">–§–∏–ª—å—Ç—Ä —á–∞—Ç–æ–≤</InputLabel>
          <Select
            labelId="chat-filter-label"
            id="chat-filter"
            value={chatFilter}
            label="–§–∏–ª—å—Ç—Ä —á–∞—Ç–æ–≤"
            onChange={handleFilterChange}
          >
            <MenuItem value="all">–í—Å–µ —á–∞—Ç—ã</MenuItem>
            <MenuItem value="open">–û—Ç–∫—Ä—ã—Ç—ã–µ —á–∞—Ç—ã</MenuItem>
            <MenuItem value="closed">–ó–∞–∫—Ä—ã—Ç—ã–µ —á–∞—Ç—ã</MenuItem>
          </Select>
        </FormControl>
      </Box>

      <Box
        ref={listRef}
        onScroll={handleScroll}
        sx={{
          flex: 1,
          overflowY: "auto",
          position: "relative",
        }}
      >
        <List disablePadding>
          {displayedChats.map((chat, index) => {
            const contact = chat.attributes.contact?.data?.attributes || {};
            const channel = chat.attributes.shannel?.data?.attributes || {};
            const lastMessage =
              chat.attributes.messages?.data?.[0]?.attributes || {};
            const isClosed = chat.attributes.isClosed;
            const unreadCount = chat.attributes.unreadCount || 0;

            return (
              <React.Fragment key={chat.id}>
                <ListItem
                  alignItems="flex-start"
                  sx={{
                    cursor: "pointer",
                    "&:hover": { bgcolor: "action.hover" },
                    bgcolor:
                      activeChatId === chat.id
                        ? "action.selected"
                        : "transparent",
                  }}
                  onClick={() => handleChatClick(chat.id)}
                >
                  <ListItemAvatar>
                    <Avatar
                      alt={contact.name || "–ö–æ–Ω—Ç–∞–∫—Ç"}
                      src={contact.avatar}
                    />
                  </ListItemAvatar>
                  <ListItemText
                    primary={
                      <Box
                        sx={{
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "center",
                        }}
                      >
                        <Typography component="span" variant="subtitle1">
                          {contact.name || "–ë–µ–∑ –∏–º–µ–Ω–∏"}
                        </Typography>
                        <Typography
                          component="span"
                          variant="caption"
                          color="text.secondary"
                        >
                          {formatDate(lastMessage.timestamp)}
                        </Typography>
                      </Box>
                    }
                    secondary={
                      <Box
                        sx={{
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "center",
                        }}
                      >
                        <Typography
                          component="span"
                          variant="body2"
                          color="text.secondary"
                          sx={{
                            overflow: "hidden",
                            textOverflow: "ellipsis",
                            whiteSpace: "nowrap",
                            maxWidth: "180px",
                          }}
                        >
                          {lastMessage.text || "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"}
                        </Typography>
                        <Box sx={{ display: "flex", alignItems: "center" }}>
                          {isClosed && (
                            <Typography
                              variant="caption"
                              color="error"
                              sx={{ mr: 1 }}
                            >
                              –ó–∞–∫—Ä—ã—Ç
                            </Typography>
                          )}
                          {unreadCount > 0 && (
                            <Badge
                              badgeContent={unreadCount}
                              color="primary"
                              sx={{ ml: 1 }}
                            />
                          )}
                        </Box>
                      </Box>
                    }
                  />
                </ListItem>
                {index < displayedChats.length - 1 && <Divider />}
              </React.Fragment>
            );
          })}
        </List>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –ø–æ–¥–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤ */}
        {isLoadingMore && (
          <Box sx={{ display: "flex", justifyContent: "center", my: 2 }}>
            <CircularProgress size={24} />
          </Box>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ */}
        {displayedChatsCount < filteredChats.length && (
          <Typography
            variant="caption"
            color="text.secondary"
            align="center"
            sx={{ display: "block", py: 1 }}
          >
            –ü–æ–∫–∞–∑–∞–Ω–æ {displayedChatsCount} –∏–∑ {filteredChats.length} —á–∞—Ç–æ–≤
          </Typography>
        )}
      </Box>
    </Box>
  );
}
